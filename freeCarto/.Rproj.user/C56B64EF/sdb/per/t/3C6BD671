{
    "contents" : "#### Class Definition\n#' Class StaticLayer.\n#'\n#' Class StaticLayer defines a static layer, not related to statistical information.\n#' @name StaticLayer-class\n#' @rdname StaticLayer-class\n#' @exportClass StaticLayer\nsetClass (\n  Class = \"StaticLayer\" ,\n  slots = c(\n    geom = \"Spatial\",\n    data = \"data.frame\",\n    geomId = \"character\",\n    dataId = \"character\",\n    labelField = \"character\",\n    labelSize = \"numeric\",\n    labelCol = \"character\",\n    col = \"character\",\n    border = \"character\",\n    thickness = \"numeric\",\n    add=\"logical\"\n  )\n)\n\n#### Methods declaration\n#' Method AddStaticLayer\n#' @name AddStaticLayer\n#' @rdname AddStaticLayer-method\n#' @aliases AddStaticLayer,StaticLayer-method\n#' @param object Object of class StaticLayer\n#' @exportMethod AddStaticLayer\n#' @docType methods\nsetGeneric(\n  name = \"AddStaticLayer\" ,\n  def=function (object){ standardGeneric (\"AddStaticLayer\")\n  }\n)\n\n#' Method AddLabels\n#' @name AddLabels\n#' @aliases AddLabels,StaticLayer-method\n#' @rdname AddLabels-method\n#' @param object Object of class StaticLayer\n#' @exportMethod AddLabels\n#' @docType methods\nsetGeneric(\n  name = \"AddLabels\" ,\n  def=function (object){ standardGeneric (\"AddLabels\")\n  }\n)\n\n\n\n#### Methods creation\n#' @rdname AddStaticLayer-method\n#' @aliases AddStaticLayer,StaticLayer,StaticLayer-method\n#' @docType methods\n#' @import sp\nsetMethod(\"AddStaticLayer\",\"StaticLayer\",\n          function (object){\n\n            if (class(object@geom)==\"SpatialPolygonsDataFrame\")\n            {plot(object@geom, border=object@border, col=object@col,lwd=object@thickness,add=object@add)}\n\n            if (class(object@geom)==\"SpatialLinesDataFrame\")\n            {plot(object@geom, col=object@col,lwd=object@thickness,add=object@add)}\n\n            if (class(object@geom)==\"SpatialPointsDataFrame\")\n            {plot(object@geom, col=object@col,lwd=object@thickness,pch=19,add=object@add)}\n          }\n)\n\n\n# #' @rdname AddLabels-method\n#' @aliases AddLabels,StaticLayer,StaticLayer-method\n#' @import sp\n#' @docType methods\nsetMethod(\"AddLabels\",\"StaticLayer\",\n          function (object){\n            if (class(object@geom)==\"SpatialPolygonsDataFrame\")\n            {\n              dots <- cbind(object@geom@data[,object@geomId],as.data.frame(coordinates(object@geom)))\n              colnames(dots) <- c(object@geomId,\"x\",\"y\")\n              print(object@geomId)\n              dots <- data.frame(dots, object@data[match(dots[,object@geomId], object@data[,object@dataId]),])\n              dots <- dots[order(dots[,object@labelField],decreasing=TRUE),]\n              text(dots$x, dots$y , labels = dots[,object@labelField],cex=object@labelSize,col=object@labelCol)\n\n            }\n\n            if (class(object@geom)==\"SpatialLinesDataFrame\")\n            {}\n\n            if (class(object@geom)==\"SpatialPointsDataFrame\")\n            {\n              dots <- cbind(object@geom@data[,object@geomId],as.data.frame(coordinates(object@geom)))\n              colnames(dots) <- c(object@geomId,\"x\",\"y\")\n              dots <- data.frame(dots, object@data[match(dots[,object@geomId], object@data[,object@dataId]),])\n              dots <- dots[order(dots[,object@labelField],decreasing=TRUE),]\n              text(dots$x, dots$y , labels = dots[,object@labelField],cex=object@labelSize,col=object@labelCol)\n            }\n\n          }\n)\n\n\n\n#### Methods wrappers\n#' StaticMap function.\n#'\n#' @name StaticMap\n#' @param obj Spatial*DataFrame\n#' @param col Filling color\n#' @param border Border color\n#' @param lwd Border thickness\n#' @param add Whether to add the layer to an existing map (TRUE) or not (FALSE)\n#' @export\n#' @examples\n#' data(\"TNdeleg\")\n#' StaticMap(obj = TNdeleg.spdf)\n#' data(\"FRdep\")\n#' StaticMap(obj = FRdep.spdf, col = \"black\", border = \"red\", lwd = 0.75, add = FALSE)\nStaticMap <- function(obj, col = \"#EFDEC1\", border = \"black\", lwd = 1, add = FALSE){\n  map <- new(Class = \"StaticLayer\")\n  if (is.na(col)){col <- NA_character_}\n  if (is.na(border)){border <- NA_character_}\n  map@geom <- obj\n  map@col <- col\n  map@border <- border\n  map@thickness <- lwd\n  map@add <- add\n  AddStaticLayer(object = map)\n}\n\n\n#' StaticMap function.\n#'\n#' @name LabelMap\n#' @param obj Spatial*DataFrame\n#' @param data DataFrame with Ids and Labels\n#' @param objid Ids of the obj Spatial*DataFrame\n#' @param dataid Ids of the DataFrame\n#' @param txt Labels field in data\n#' @param col Labels color\n#' @param cex Labels size\n#' @export\n#' @examples\n#' data(\"TNdeleg\")\n#' StaticMap(obj = TNdeleg.spdf)\n#' LabelMap(obj = TNdeleg.spdf, data = TNdeleg)\n#'\n#' data(\"FRdep\")\n#' StaticMap(obj = FRdep.spdf, col = \"black\", border = \"red\", lwd = 0.75, add = FALSE)\n#' LabelMap(obj = FRdep.spdf, objid = \"dep_code\", data = FRdep, dataid = \"dep_code\",\n#'          cex = 0.6, txt = \"dep_name\", col = \"green\")\nLabelMap <- function(obj, data, objid = NA, dataid = NA, txt, col = \"black\", cex = 0.7){\n  map <- new(Class = \"StaticLayer\")\n  map@geom <- obj\n  map@data <- data\n  if (is.na(objid)){map@geomId <- names(map@geom@data)[1]}else{map@geomId <- objid}\n  if (is.na(dataid)){map@dataId<-names(map@data)[1]}else{map@dataId <- dataid}\n  if (missing(txt)){map@labelField <-map@geomId}else{map@labelField <- txt}\n  map@labelCol <- col\n  map@labelSize <- cex\n  AddLabels(object = map)\n}\n",
    "created" : 1424945176480.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1287031555",
    "id" : "3C6BD671",
    "lastKnownWriteTime" : 1424966004,
    "path" : "/mnt/data/FreeCarto/freeCarto/R/StaticLayer.R",
    "project_path" : "R/StaticLayer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}